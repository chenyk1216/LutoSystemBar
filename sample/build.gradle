apply plugin: 'com.android.application'

//加载签名配置文件
def keystorePropertiesFile = rootProject.file("sample/keystore.properties")
def keystoreProperties = new Properties();
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.chenyk.sample"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName keystoreProperties['versionName']
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，现将其关掉。
    lintOptions {
        abortOnError false
    }

    //签名配置
    signingConfigs {
        debug {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"// 显示Log
            versionNameSuffix "_debug" // apk包版本号后缀，用来区分release和debug
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false" // 不显示Log
            minifyEnabled false   //是否开启混淆
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，指定混淆规则文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            //修改输出文件的名称
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "LutoSystemBar_${variant.productFlavors[0].name}_V${defaultConfig.versionName}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    //渠道Flavors，配置不同风格的app
    productFlavors {
        Normal {}//普通版
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
    compile project(':lutobarlib')
}
